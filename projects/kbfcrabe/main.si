// MIT license, see LICENSE_MIT in Silice repo root
// https://github.com/sylefeb/Silice
// @sylefeb 2021

$$if not ORANGECRAB and not SIMULATION then
$$error([[this project is specific to the OrangeCrab mounted
$$               on a FeatherWing Keyboard from @solderparty]])
$$end

// include SPI controller
$include('../common/spi.si')

// PLL ; NOTE: we're happily overclocking at 100 MHz, passes ~65 MHz
$$if ORANGECRAB then
import('../common/plls/orangecrab_100.v')
$$end

// CPU declaration
riscv cpu_drawer(output uint1  screen_rst, // screen reset
                 output uint32 screen,     // screen command/data
                 output uint1  on_screen,  // pulses high when CPU writes screen
                 output uint32 rgb,        // send a pixel (RGB 24 bits)
                 output uint1  on_rgb,     // pulses high when CPU writes rgb
                 output uint32 leds,       // set on-board LEDs
                 output uint1  on_leds     // pulses high when CPU writes leds
                ) <
                  mem=98304, // we allocate a big chunk (framebuffer+code)
                  core="ice-v-dual", // dual core please
                  ICEV_FAST_SHIFT=1, // fast shifts (barrel shifter)
                  O=3        // compile with -O3
                > {

  // =============== firmware in C language ===========================
  #include "lcd_ili9351.h" // include LCD screen driver

  //_ framebuffer
  unsigned char tbl[320*240 + 8/*padding*/];

  //_ 32 xRGB entries ('fire' palette)
  unsigned char pal[] = {
    0,0x04,0x04,0x04, 0,0x1c,0x04,0x04, 0,0x2c,0x0c,0x04, 0,0x44,0x0c,0x04,
    0,0x54,0x14,0x04, 0,0x64,0x1c,0x04, 0,0x74,0x1c,0x04, 0,0x9c,0x2c,0x04,
    0,0xac,0x3c,0x04, 0,0xbc,0x44,0x04, 0,0xc4,0x44,0x04, 0,0xdc,0x54,0x04,
    0,0xdc,0x54,0x04, 0,0xd4,0x5c,0x04, 0,0xd4,0x5c,0x04, 0,0xd4,0x64,0x0c,
    0,0xcc,0x74,0x0c, 0,0xcc,0x7c,0x0c, 0,0xcc,0x84,0x14, 0,0xc4,0x84,0x14,
    0,0xc4,0x94,0x1c, 0,0xbc,0x9c,0x1c, 0,0xbc,0x9c,0x1c, 0,0xbc,0xa4,0x24,
    0,0xbc,0xa4,0x24, 0,0xbc,0xac,0x2c, 0,0xb4,0xac,0x2c, 0,0xb4,0xb4,0x2c,
    0,0xcc,0xcc,0x6c, 0,0xdc,0xdc,0x9c, 0,0xec,0xec,0xc4, 0,0xef,0xef,0xef};

  //_ draws fire onto the LCD
  void draw_fire()
  {
    while (1) {
      for (int u=0;u<320;u++) {
        unsigned char *col = tbl + u;
        for (int v=0;v<240;++v) {
          // palette lookup
          int clr  = ((*col)>>2)&31;
          col     += 320;
          int *ptr = (int*)(pal) + clr;
          // send to screen
          rgb(*ptr);
          // insert a delay to wait for SPI completion
          asm volatile ("nop; nop; nop; nop; nop;");
        }
      }
    }
  }

  //_ update the fire framebuffer
  void update_fire()
  {
    int rng  = 31421;  // random number generator seed
    while (1) {
$$if SIMULATION then
      leds(0); // used to measure loop cycles in simulation
$$end
      // move up
      unsigned char *below   = tbl;
      unsigned char *current = tbl + 320;
      for ( ; current < tbl + 240*320 ; ++current ) {
        int clr = 0;
        if ((*below) > 1) {
          clr = (*below)-(rng&1);
        }
        rng = (rng<<3) + ((rng>>3) ^ (int)current);
        *(current + (rng&3)) = clr; // NOTE: table padding avoids
                                    //       out of bounds access
        ++ below;
      }
      // keep the heat on
      unsigned char *ptr = tbl;
      for (int v=0;v<320;v++) {
        rng = (rng<<5) + ((rng>>5) ^ (int)ptr);
        (*ptr++) = 120 + (rng&7);
      }
    }
  }

  //_ C main
  void main() {
    if (core_id() == 0) {
      screen_init();
      screen_rect(0,239, 0,319);
      draw_fire();
    } else {
      update_fire();
    }
  }

  // =============== end of firmware ==================================
}

// now we are creating the hardware hosting the CPU
unit main(
  output uint8  leds,
$$if SIMULATION then
  output uint1  oled_clk,
  output uint1  oled_mosi,
  output uint1  oled_dc,
  output uint1  oled_resn,
  output uint1  oled_csn(0),
  output uint2  spiscreen_driver(3/*ILI9351*/),
  output uint10 spiscreen_width(320),
  output uint10 spiscreen_height(240),
$$else
  inout  uint14 G,
  inout  uint6  A,
  output uint1  sck,
  output uint1  sda,
  output uint1  scl,
  output uint1  mosi,
  input  uint1  miso,
$$end
)
$$if not SIMULATION then
<@fast_clock>
$$end
{

$$if not SIMULATION then
  uint1 fast_clock(0);
  pll main_pll(
    clkin   <: clock,
    clkout0 :> fast_clock
  );
$$end
  // instantiates our CPU as defined above
  cpu_drawer cpu;

$$if SIMULATION then
  uint32 cycle(0);
  uint32 prev(0);
$$end

  // interface for sending a full pixel
  uint24 pix_data(0);              // RGB 24bits to send
  uint3  pix_sending(3b000);       // sending? (111 => 011 => 001 => 000 done)
  uint1  pix_wait(0);              // wait before sending?
  uint1  pix_send_ready  <:: :displ.ready & ~pix_wait; // can we send?
  //                         ^^^ SPI ready  ^^^ did not send just before
  // We have to check we did not send on cycle before as it takes one cycle
  // for the SPI controller to lower displ.ready after a disp.enable

  // screen driver
  uint1 displ_en         <:: pix_sending[0,1] ?  pix_send_ready
                                              : :cpu.on_screen;
  uint1 displ_dta_or_cmd <:: pix_sending[0,1] ? 1b1           : :cpu.screen[10,1];
  uint8 displ_byte       <:: pix_sending[0,1] ? pix_data[0,8] : :cpu.screen[0,8];
  spi_mode3_send displ(
    enable          <: displ_en,
    data_or_command <: displ_dta_or_cmd,
    byte            <: displ_byte,
  );

  always {
    leds          = cpu.leds;
    if (cpu.on_rgb) {
      // CPU requests RGB write
$$if SIMULATION then
      if (pix_sending[0,1]) {
        __display("[ERROR] still sending previous pixel");
      }
$$end
      // grab pixel data
      pix_data    = cpu.rgb[8,24];
      // initiate sending RGB
      pix_sending = 3b111;
    } else {
      // if we can send, shift to next RGB component
      pix_data    = pix_send_ready ? pix_data>>8    : pix_data;
      pix_sending = pix_send_ready ? pix_sending>>1 : pix_sending;
    }
    // did we send this cycle?        vvv something to send    vvv SPI ready
    pix_wait      = pix_wait ? 1b0 : (pix_sending[0,1] & displ.ready);
$$if not SIMULATION then
    G.oenable = 14b11111111111111;
    G.o       = {
      /*13:        */ 1b0,
      /*12:        */ 1b0,
      /*11:        */ 1b0,
      /*10:  lcd_dc*/ displ.spi_dc,
      /* 9:  lcd_cs*/ 1b0,
      /* 8:        */ 1b0,
      /* 7:        */ 1b0,
      /* 6: stmp_cs*/ 1b1,
      /* 5: card_cs*/ 1b1,
      /* 4:        */ 1b0,
      /* 3:        */ 1b0,
      /* 2:        */ 1b0,
      /* 1:        */ 1b0,
      /* 0:        */ 1b0
    };
    A.oenable = 6b111111;
    A.o       = {5b0,cpu.screen_rst};
    mosi      = displ.spi_mosi;
    sck       = displ.spi_clk;
$$else
    if (cpu.on_leds) {
      __display("%d] elapsed: %d cycles",cpu.leds,cycle - prev);
      prev = cycle;
    }
    oled_clk  = displ.spi_clk;
    oled_mosi = displ.spi_mosi;
    oled_dc   = displ.spi_dc;
    oled_resn = cpu.screen_rst;
    oled_csn  = 0;
    cycle     = cycle + 1;
$$end
  }

}
