// SL 2022-03-16 @sylefeb
//
// Compact dual core RV32I cpu, see IceVDual.md
//
// NOTE: please get familiar with the ice-v first.
//
// https://github.com/sylefeb/Silice
// MIT license, see LICENSE_MIT in Silice repo root

$$if ICEV_FAST_SHIFT then
$$print("Ice-V-dual configured for fast shift (barrel shifter)")
$$end

// --------------------------------------------------
// Processor
// --------------------------------------------------

$$if SIMULATION then
$$VERBOSE = nil
$$end

$$CORE0 = 1   -- set to nil to disable debug output for core 0
$$KILL0 = nil -- set to 1 to disable core 0

$$CORE1 = 1   -- set to nil to disable debug output for core 1
$$KILL1 = nil -- set to 1 to disable core 1

$$if ICEV_RV32E then
$$ print("Ice-V-dual configured for RV32E")
$$ Nregs  = 16
$$ cycleW = 32
$$else
$$ print("Ice-V-dual configured for RV32I")
$$ Nregs  = 32
$$ cycleW = 32
$$end

$$if ICEV_MULDIV then
$$ print("Ice-V-dual configured with mul and div (*not* full RV32IM)")
$$div_width  = 32
$$div_signed = 1
$include('../../common/divint_std.si')
$$end

$$NOP=0x13

$$if not Boot then Boot = 0 end

// bitfield for easier decoding of instructions
bitfield Rtype { uint1 unused1, uint1 sign, uint4 unused2, uint1 muldiv,
                 uint5 rs2,     uint5 rs1,  uint3 op, uint5 rd, uint7 opcode}

// --------------------------------------------------
// execute: decoder + ALU
// - decodes instructions
// - performs all integer computations
// - similar to ice-v, adds core_id and revised shifter
// NOTE: same as ice-v dual, merge?

algorithm execute(
  // instruction, program counter and registers
  input  uint32 instr,   input  uint$addrW$ pc, input int32 xa, input int32 xb,
  // trigger: pulsed high when the decoder + ALU should start
  input  uint1  trigger, input   uint1  core_id,
  // outputs all information the processor needs to decide what to do next
  output uint3  op,    output uint5  write_rd, output  uint1  no_rd,
  output uint1  jump,  output uint1  load,     output  uint1  store,
  output int32  val,   output uint1  storeVal, output  uint1  working(0),
  output uint$addrW+2$ n(0),  output uint1  storeAddr, // next address adder
  output uint1  intop, output int32  r,         // integer operations
$$if ICEV_USERDATA then
  input  uint32 user_data
$$end
) {
  uint5        shamt(0); // shifter status
  uint$cycleW$ cycle(0); // cycle counter

  // ==== decode immediates
  int32 imm_u  <: {instr[12,20],12b0};
  int32 imm_j  <: {{12{instr[31,1]}},instr[12,8],instr[20,1],instr[21,10],1b0};
  int32 imm_i  <: {{20{instr[31,1]}},instr[20,12]};
  int32 imm_b  <: {{20{instr[31,1]}},instr[7,1],instr[25,6],instr[8,4],1b0};
  int32 imm_s  <: {{20{instr[31,1]}},instr[25,7],instr[7,5]};

  // ==== decode opcode
  uint5 opcode    <: instr[ 2, 5];
  uint1 AUIPC     <: opcode == 5b00101;  uint1 LUI    <: opcode == 5b01101;
  uint1 JAL       <: opcode == 5b11011;  uint1 JALR   <: opcode == 5b11001;
  uint1 IntImm    <: opcode == 5b00100;  uint1 IntReg <: opcode == 5b01100;
  uint1 CSR       <: opcode == 5b11100;  uint1 branch <: opcode == 5b11000;
  uint1 regOrImm  <: IntReg  | branch;                    // reg or imm in ALU?
  uint1 pcOrReg   <: AUIPC   | JAL    | branch;           // pc or reg in addr?
  uint1 sub       <: IntReg  & Rtype(instr).sign;         // subtract
  uint1 aluShift  <: (IntImm | IntReg) & op[0,2] == 2b01; // shift requested
$$if ICEV_MULDIV then
  uint1 muldiv    <: IntReg & Rtype(instr).muldiv;        // mul or div
  div32 div<reginputs>;
  uint1 dividing(0);
  uint1 div_done(0);
$$end

  // ==== select next address adder first input
  int$addrW+3$ addr_a <: pcOrReg ? __signed({1b0,pc[0,$addrW-1$],2b0}) : xa;
  // ==== select ALU second input
  int32 b             <: regOrImm ? (xb) : imm_i;

$$if ICEV_ALU_LATCH then
  int32 ra(0);    int32 rb(0);
$$else
  int32 ra <: xa; int32 rb <: b;
$$end

  // ==== allows to do subtraction and all comparisons with a single adder
  // trick from femtorv32/swapforth/J1
  int33 a_minus_b <: {1b1,~rb} + {1b0,ra} + 33b1;
  uint1 a_lt_b    <: (ra[31,1] ^ rb[31,1]) ? ra[31,1] : a_minus_b[32,1];
  uint1 a_lt_b_u  <: a_minus_b[32,1];
  uint1 a_eq_b    <: a_minus_b[0,32] == 0;

  // ==== select immediate for the next address computation
  // 'or trick' from femtorv32
  int$addrW+3$ addr_imm <: (AUIPC  ? imm_u : 32b0) | (JAL         ? imm_j : 32b0)
                        |  (branch ? imm_b : 32b0) | ((JALR|load) ? imm_i : 32b0)
                        |  (store  ? imm_s : 32b0);
  // ==== set decoder outputs depending on incoming instructions
  // load/store?
  load         := opcode == 5b00000;   store        := opcode == 5b01000;
  // operator for load/store           // register to write to?
  op           := Rtype(instr).op;     write_rd     := Rtype(instr).rd;
  // do we have to write a result to a register?
  no_rd        := branch  | store  | (Rtype(instr).rd == 5b0);
  // integer operations                // store next address?
  intop        := (IntImm | IntReg);   storeAddr    := AUIPC;
  // value to store directly
$$if ICEV_USERDATA then
  val          :=    (LUI                ? imm_u                 : 32b0)
                |  ( (CSR &~instr[20,1]) ? {cycle[0,31],core_id} : 32b0)
                |  ( (CSR & instr[20,1]) ? user_data             : 32b0);
$$else
  val          := LUI ? imm_u : {cycle[0,31],core_id};
$$end
  // store value?
  storeVal     := LUI | CSR;

  always {
    uint1 j(0); // temp variables for and comparator

    // ====================== ALU
$$if not ICEV_FAST_SHIFT then
    // are we still shifting?
    uint1 shiting <:: (shamt != 0);
    // shift (one bit per clock)
    if (trigger) {
      // start shifting?
      shamt  = aluShift ? __unsigned(b[0,5]) : 0;
      // store value to be shifted
      r      = xa;
    } else {
      if (shiting) {
        // decrease shift size
        shamt = shamt - 1;
        // shift one bit
        r     = op[2,1] ? (Rtype(instr).sign ? {r[31,1],r[1,31]}
                        : {__signed(1b0),r[1,31]}) : {r[0,31],__signed(1b0)};
      }
    }
    working = (shamt != 0);
$$end
    // all ALU operations
    switch (op) {
      case 3b000: { r = sub ? a_minus_b : ra + rb; }            // ADD / SUB
      case 3b010: { r = a_lt_b; } case 3b011: { r = a_lt_b_u; } // SLTI / SLTU
      case 3b100: { r = ra ^ rb;} case 3b110: { r = ra | rb;  } // XOR / OR
$$if not ICEV_FAST_SHIFT then
      case 3b001: { }             case 3b101: { }              // SLLI/SRLI/SRAI
$$else
      case 3b001: { r = (ra <<< rb[0,5]); }
      case 3b101: { r = Rtype(instr).sign ? (ra >>> rb[0,5]) : (ra >> rb[0,5]); }
$$end
      case 3b111: { r = ra & rb; }     // AND
      default:    { r = {32{1bx}}; }  // don't care
    }

$$if ICEV_MULDIV then
    // mul div
    div.inum = xa;
    div.iden = xb;
    if (muldiv) {
      //__display("[cycle %d] dividing:%b working:%b isdone(div):%b",cycle,dividing,working,isdone(div));
      switch ({op}) {
        case 3b000: { // MUL
          //__display("MULTIPLICATION %d * %d",xa,xb);
          r        = ra * rb;
					dividing = 0; // NOTE: required for hrdwr to work? highly suspicious.
        }
        case 3b100: { // DIV
          if (~working & ~dividing) {
             //__display("[cycle %d] DIVISION trigger",cycle);
            working       = 1;
            dividing      = 1;
            div <- ();
          } else {
            if (isdone(div) & ~div_done) {
              //__display("[cycle %d] DIVISION %d / %d = %d",cycle,xa,xb,div.ret);
              div_done    = 1;
              dividing    = 1;
            } else {
              //if (isdone(div)) { __display("[cycle %d] DIVISION done",cycle); }
              div_done    = 0;
              dividing    = 0;
            }
            working = ~isdone(div);
          }
          r        = div.ret;
        }
        default:   { r = {32{1bx}}; }
      }
    } else {
		  dividing = 0;
		}
$$end

$$if VERBOSE then
    if (working) {
      __display("[cycle %d] ALU busy",cycle);
    }
$$end

    // ====================== Comparator for branching
    switch (op[1,2]) {
      case 2b00:  { j = a_eq_b;  } /*BEQ */ case 2b10: { j=a_lt_b;} /*BLT*/
      case 2b11:  { j = a_lt_b_u;} /*BLTU*/ default:   { j = 1bx; }
    }
    jump = (JAL | JALR) | (branch & (j ^ op[0,1]));
    //                                   ^^^^^^^ negates comparator result

    // ====================== Next address adder
    n = addr_a + addr_imm;

    // ==== increment cycle counter
    cycle = cycle + 1;

$$if ICEV_ALU_LATCH then
    // ==== latch xa and b (fmax relief)
    ra = xa; rb = b;
$$end
  }

}

// --------------------------------------------------
// Dual Risc-V RV32I CPU with dual memory interface
// Ice-V dual fermata
// ---- interleaved CPU stages ----
// F:     instruction fetched
// T:     trigger ALU+decode
// LS1:   load/store stage 1
// LS2/C: load/store stage 2, commit result to register
//
//  F  , T  , LS1, LS2/C
//  0    x    1    x    // stage == 0  4b00
//  x    0    x    1    // stage == 1  4b01
//  1    x    0    x    // stage == 2  4b10
//  x    1    x    0    // stage == 3  4b11
//
// At each cycle two states are active:
// cycle i    F(0) + LS1  (1)
// cycle i+1  T(0) + LS2/C(1)
// cycle i+2  F(1) + LS1  (0)
// cycle i+3  T(1) + LS2/C(0)
// ...          ^          ^ active core
//
// RAM requests occur on
// - LS1   in case of load/store
// - LS2/C to fetch next instruction
// ---------------------------------

// interface for ram user
interface icev_ram_user {
  output!  addr,      // memory address
  output!  wenable,   // write enable
  output!  wdata,     // data to be written
  input    rdata,     // data read from memory
  output!  req_valid, // pulses high when request is valid
  input    done,      // pulses high when request is completed
}

algorithm icev_dual_fermata(
  icev_ram_user mem0,
  icev_ram_user mem1, // NOTE: both interface have to be the same widths
$$if ICEV_USERDATA then
  input uint32  user_data
$$end
) {

  // register files, two BRAMs to fetch two registers at once
  bram int32 xregsA_0[$Nregs$]={pad(0)}; bram int32 xregsB_0[$Nregs$]={pad(0)};
  bram int32 xregsA_1[$Nregs$]={pad(0)}; bram int32 xregsB_1[$Nregs$]={pad(0)};

  // current instruction
  uint32 instr_0($NOP$);
  uint32 instr_1($NOP$);
  uint1  instr_trigger(0);

  // CPU dual stages
  uint2  stage(0);

  // program counters
  uint$addrW$ pc_0($Boot//4-1$);
  uint$addrW$ pc_1($Boot//4-1$);
  // next program counter
  uint$addrW$ pc_plus1 <:: (stage[1,1] ? pc_0 : pc_1) + 1;

  // value that has been loaded from memory
  int32 loaded = uninitialized;

  // decoder + ALU, executes the instruction and tells the processor what to do
  uint32 instr <:: (stage[0,1]^stage[1,1]) ? instr_0 : instr_1;
  uint32 pc    <:: (stage[0,1]^stage[1,1]) ? pc_0    : pc_1;
  int32  xa    <:: (stage[0,1]^stage[1,1]) ? :xregsA_0.rdata : :xregsA_1.rdata;
  int32  xb    <:: (stage[0,1]^stage[1,1]) ? :xregsB_0.rdata : :xregsB_1.rdata;
  execute exec(instr <: instr,pc <: pc, xa <: xa, xb <: xb);

  // which memory interface is active?
  uint1 i_mem_select <::   (stage[0,1]^stage[1,1]);
  uint1 o_mem_select <:: ~ stage[1,1];
  sameas(mem0.rdata)     i_mem_rdata(0);
  sameas(mem0.addr)      i_mem_addr(0);
  sameas(mem0.wdata)     o_mem_wdata(0);
  sameas(mem0.wenable)   o_mem_wenable(0);
  // track received and pending requests
  uint1                  reqmem0_instr(0);
  uint1                  reqmem1_instr(0);
  uint1                  reqmem0_ldst(0);
  uint1                  reqmem1_ldst(0);
  // did we receive new data?
  uint1                  reqmem0_was_done(0);
  uint1                  reqmem1_was_done(0);
  uint1 reqmem0_done <:: reqmem0_was_done | :mem0.done;
  uint1 reqmem1_done <:: reqmem1_was_done | :mem1.done;

$$if VERBOSE then
  uint32 cycle(0);
$$end

  int32 write_back(0);

  // always block, done every cycle
  always {
    uint32 aligned(0);
$$if VERBOSE then
    if (~reset) {
      __display("\n[cycle %d] ---------------- stage: %b ----- exec.working:%b mem0.done:%b(%b)=%h(@%h) mem1.done:%b(%d)=%h(@%h)",cycle,stage,exec.working,mem0.done,reqmem0_done,mem0.rdata,mem0.addr,mem1.done,reqmem1_done,mem1.rdata,mem1.addr);
    }
$$end
    // read from selected memory
    i_mem_rdata     = i_mem_select ? mem1.rdata : mem0.rdata;
    i_mem_addr      = i_mem_select ? mem1.addr  : mem0.addr;
    // maintain request valid low
    mem0.req_valid  = 0;
    mem1.req_valid  = 0;
$$if VERBOSE then
    if (i_mem_select) {
      //__display("[cycle %d] IN  memory MEM 1, reqmem_done:%d, instr|load: %b|%b",cycle,reqmem1_done,reqmem1_instr,reqmem1_ldst);
    } else {
      //__display("[cycle %d] IN  memory MEM 0, reqmem_done:%d, instr|load: %b|%b",cycle,reqmem0_done,reqmem0_instr,reqmem0_ldst);
    }
$$end
    // decodes values loaded from memory (used when exec.load == 1)
    aligned = i_mem_rdata >> {exec.n[0,2],3b000};
    switch ( exec.op[0,2] ) { // LB / LBU, LH / LHU, LW
      case 2b00:{ loaded = {{24{(~exec.op[2,1])&aligned[ 7,1]}},aligned[ 0,8]}; }
      case 2b01:{ loaded = {{16{(~exec.op[2,1])&aligned[15,1]}},aligned[ 0,16]};}
      case 2b10:{ loaded = aligned;   }
      default:  { loaded = {32{1bx}}; } // don't care
    }
    // what do we write in register? (pc, alu, val or load)
    write_back =      (exec.jump      ? (pc_plus1<<2)       : 32b0)
                    | (exec.storeAddr ? exec.n[0,$addrW+2$] : 32b0)
                    | (exec.storeVal  ? exec.val            : 32b0)
                    | (exec.load      ? loaded              : 32b0)
                    | (exec.intop     ? exec.r              : 32b0);
$$if ICEV_USERDATA then
    exec.user_data = user_data;
$$end
    // what to write on a store (used when exec.store == 1)
    o_mem_wdata    = stage[1,1] ? (xregsB_0.rdata << {exec.n[0,2],3b000})
                                : (xregsB_1.rdata << {exec.n[0,2],3b000});
    // maintain write enable low (pulses high when needed)
    mem0.wenable   = 4b0000;
    mem1.wenable   = 4b0000;
    o_mem_wenable  = 4b0000;
    // maintain alu trigger low
    exec.trigger   = 0;
    // maintain register wenable low
    // (pulsed when necessary)
    xregsA_0.wenable = 0;
    xregsA_1.wenable = 0;

    // dual state machine
    // four states: F, T, LS1, LS2/commit
$$if VERBOSE then
    //__display("[cycle %d] ====== stage:%b reset:%b pc_0:%h pc_1:%h",cycle,stage,reset,pc_0,pc_1);
$$end

    if ( ~ stage[0,1] ) { // even stage

      // one core on F, one core on LS1

      // F
$$if KILL0 then
      instr_0 = $NOP$;
      pc_0    = 0;
$$else
      instr_0 = ~stage[1,1] & reqmem0_done & reqmem0_instr ? i_mem_rdata : instr_0;
      pc_0    = ~stage[1,1] & reqmem0_done & reqmem0_instr ? i_mem_addr  : pc_0;
$$end
$$if KILL1 then
      instr_1 = $NOP$;
      pc_1    = 0;
$$else
      instr_1 = stage[1,1] & reqmem1_done & reqmem1_instr ? i_mem_rdata : instr_1;
      pc_1    = stage[1,1] & reqmem1_done & reqmem1_instr ? i_mem_addr  : pc_1;
$$end
      // instruction fetch done?
      if (i_mem_select) {
        instr_trigger   =  reqmem1_done | reqmem1_instr; // trigger ALU only once
        //                                ^^^^^^^^^^^^^^
        //                           required if ALU holds: stage repeats
        reqmem1_instr   = ~reqmem1_done & reqmem1_instr;
      } else {
        instr_trigger   =  reqmem0_done | reqmem0_instr;
        reqmem0_instr   = ~reqmem0_done & reqmem0_instr;
      }

$$if VERBOSE then
      if (instr_trigger) {
        if (~stage[1,1]) {
$$if CORE0 then
          __display("[cycle %d] (0) F instr_0:%h (@%h)",cycle,instr_0,pc_0<<2);
$$end
        } else {
$$if CORE1 then
          __display("[cycle %d] (1) F instr_1:%h (@%h)",cycle,instr_1,pc_1<<2);
$$end
        }
      }
$$end

      // LS1
      // memory address from which to load/store
      if (o_mem_select) {
        uint1 do_load_store(0);
        do_load_store   = ~exec.working & ~reqmem1_instr & ~reqmem1_ldst & (exec.load | exec.store);
        //                ^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        //                |               |
        //         ignore if ALU holds    |
        //                        ignore if waiting for instr or load/store
        //
        mem1.addr       = do_load_store ? (exec.n >> 2) : mem1.addr;
        reqmem1_ldst    = do_load_store ? 1 : reqmem1_ldst;
        mem1.req_valid  = do_load_store;
      } else {
        uint1 do_load_store(0);
        do_load_store   = ~exec.working & ~reqmem0_instr & ~reqmem0_ldst & (exec.load | exec.store);
        mem0.addr       = do_load_store ? (exec.n >> 2) : mem0.addr;
        reqmem0_ldst    = do_load_store ? 1 : reqmem0_ldst;
        mem0.req_valid  = do_load_store;
      }

      // no need to know which core, since we only read from exec
      if (exec.store) {
        // == Store (enabled if exec.store == 1)
        // build write mask depending on SB, SH, SW
        // assumes aligned, e.g. SW => next_addr[0,2] == 2
        o_mem_wenable = ( { { 2{exec.op[0,2]==2b10} },
                              exec.op[0,1] | exec.op[1,1], 1b1
                          } ) << exec.n[0,2];
      }

$$if VERBOSE then
      {
        if (stage[1,1] & mem0.req_valid) {
$$if CORE0 then
          //__display("[cycle %d] (0) LS1(%b) @%h = %h (wen:%b)",cycle,mem0.req_valid,mem0.addr,o_mem_wdata,o_mem_wenable);
$$end
        }
        if (~stage[1,1] & mem1.req_valid) {
$$if CORE1 then
          //__display("[cycle %d] (1) LS1(%b) @%h = %h (wen:%b)",cycle,mem1.req_valid,mem1.addr,o_mem_wdata,o_mem_wenable);
$$end
        }
      }
$$end

    } else { // stage odd

      // one core on T, one core on LS2/commit

      // T
      // triggers exec for the core which has been selected at F cycle before
      // registers are now in for it
      exec.trigger = instr_trigger;
      exec.core_id = stage[1,1];

$$if VERBOSE then
      if (instr_trigger) {
        if (~stage[1,1]) {
$$if CORE0 then
          //__display("[cycle %d] (0) T %h @%h xa[%d]=%h xb[%d]=%h",cycle,
          //  instr,pc,
          //  xregsA_0.addr,xregsA_0.rdata,xregsB_0.addr,xregsB_0.rdata);
$$end
        } else {
$$if CORE1 then
          //__display("[cycle %d] (1) T %h @%h xa[%d]=%h xb[%d]=%h",cycle,
          //  instr,pc,
          //  xregsA_1.addr,xregsA_1.rdata,xregsB_1.addr,xregsB_1.rdata);
$$end
        }
      }
$$end
      instr_trigger = 0;

      // LS2/commit

      // commit result
      xregsA_0.wenable =  stage[1,1] ? (~exec.no_rd & ~reqmem0_instr) : 0;
      xregsA_1.wenable = ~stage[1,1] ? (~exec.no_rd & ~reqmem1_instr) : 0;
      //                                              ^^^^^^^^^^^^^^
      //                                 ignore if waiting for an instruction
      // load/store done?
      if (i_mem_select) {
        reqmem1_ldst   = ~reqmem1_done & reqmem1_ldst;
      } else {
        reqmem0_ldst   = ~reqmem0_done & reqmem0_ldst;
      }
$$if VERBOSE then
$$if CORE0 then
      if (xregsA_0.wenable) {
        //__display("[cycle %d] (0) LS2/C xr[%d]=%h",
        //  cycle,exec.write_rd,write_back);
      }
$$end
$$if CORE1 then
      if (xregsA_1.wenable) {
        //__display("[cycle %d] (1) LS2/C xr[%d]=%h",
        //  cycle,exec.write_rd,write_back);
      }
$$end
$$end
      // prepare instruction fetch
      // instruction fetch in progress
      if (o_mem_select) {
        uint1 do_fetch(0);
        do_fetch        = ~exec.working & ~reqmem1_ldst & ~reqmem1_instr;
        mem1.addr       = do_fetch ? (exec.jump ? (exec.n >> 2) : pc_plus1)
                                   : mem1.addr;
        reqmem1_instr   = do_fetch ? 1 : reqmem1_instr;
        mem1.req_valid  = do_fetch;
      } else {
        uint1 do_fetch(0);
        do_fetch        = ~exec.working & ~reqmem0_ldst & ~reqmem0_instr;
        mem0.addr       = do_fetch ? (exec.jump ? (exec.n >> 2) : pc_plus1)
                                   : mem0.addr;
        reqmem0_instr   = do_fetch ? 1 : reqmem0_instr;
        mem0.req_valid  = do_fetch;
      }

    }

    // advance states unless stuck in ALU or reset is high
    stage = (exec.working | reset) ? stage : stage + 1;
$$if VERBOSE then
    if (reset) { __display("[cycle %d] reset",cycle); }
$$end

    // write back data to both register BRAMs
    xregsA_0.wdata   = write_back;      xregsB_0.wdata   = write_back;
    xregsA_1.wdata   = write_back;      xregsB_1.wdata   = write_back;
    // xregsB written when xregsA is
    xregsB_0.wenable = xregsA_0.wenable;
    xregsB_1.wenable = xregsA_1.wenable;
    // write to write_rd, else track instruction register
    xregsA_0.addr    = xregsA_0.wenable ? exec.write_rd : Rtype(instr_0).rs1;
    xregsB_0.addr    = xregsA_0.wenable ? exec.write_rd : Rtype(instr_0).rs2;
    xregsA_1.addr    = xregsA_1.wenable ? exec.write_rd : Rtype(instr_1).rs1;
    xregsB_1.addr    = xregsA_1.wenable ? exec.write_rd : Rtype(instr_1).rs2;
    // write to selected memory
    if (o_mem_select) {
      mem1.wdata     = o_mem_wdata;
      mem1.wenable   = o_mem_wenable;
    } else {
      mem0.wdata     = o_mem_wdata;
      mem0.wenable   = o_mem_wenable;
    }
    reqmem0_was_done = mem0.req_valid ? 0 : (mem0.done|reqmem0_was_done);
    reqmem1_was_done = mem1.req_valid ? 0 : (mem1.done|reqmem1_was_done);
$$if VERBOSE then
    // __display("[cycle %d] mem0 @%h(%b)w:%b mem1 @%h(%b)w:%b",cycle,mem0.addr,mem0.req_valid,mem0.wenable,mem1.addr,mem1.req_valid,mem1.wenable);
$$end

$$if VERBOSE then
    cycle = cycle + 1;
$$end

  }

}
