// SL 2020-05 @sylefeb
//
// Pipelined RV32I cpu, see ../CPUs/ice-v-swirl.si for notes
//
// https://github.com/sylefeb/Silice
// MIT license, see LICENSE_MIT in Silice repo root

// Clocks
$$if ICEBREAKER or ICEBITSY then
$$ICE40 = 1
import('../../common/plls/icebrkr_25.v')
import('../../common/ice40_sb_io.v')
$$elseif not SIMULATION then
$$error('This SOC is for the UP5K (icebreaker, icebitsy).')
$$end

$$config['bram_wmask_byte_wenable_width'] = 'data'

// pre-compilation script, embeds compiled code within a string
$$data_addr = 4096
$$dofile('pre_include_compiled.lua')

$$addrW = 12

// include the processor
$include('../CPUs/ice-v-swirl.si')

// --------------------------------------------------
// SOC
// --------------------------------------------------

group bram_io
{
  uint4       wenable(0),
  uint32      wdata(0),
  uint32      rdata(0),
  uint$addrW$ addr(0),    // boot address
}

unit main( // I guess this is the SOC :-D
  output uint5 leds,
$$if OLED then
  output uint1 oled_clk,
  output uint1 oled_mosi,
  output uint1 oled_dc,
  output uint1 oled_resn,
  output uint1 oled_csn(0),
$$if VERILATOR then
  output uint2  spiscreen_driver(1/*SSD1351*/),
  output uint10 spiscreen_width(128),
  output uint10 spiscreen_height(128),
$$end
$$end
$$if SPIFLASH then
  output uint1 sf_clk,
  output uint1 sf_csn,
  output uint1 sf_mosi,
  input  uint1 sf_miso,
$$end
)
$$if not SIMULATION then
<@cpu_clock> {
  // clock
  uint1 cpu_clock  = uninitialized;
  pll clk_gen (
    clock_in  <: clock,
    clock_out :> cpu_clock
  );
$$else
{
$$end

$$if OLED then
  uint1 o_mosi(0); uint1 o_clk(0); uint1 o_dc(0); uint1 o_resn(0);
  uint1 displ_en(0);
  uint1 displ_dta_or_cmd <: memio.wdata[10,1];
  uint8 displ_byte       <: memio.wdata[0,8];
  oled display<reginputs>(
    oled_din        :> o_mosi,
    oled_clk        :> o_clk,
    oled_dc         :> o_dc,
  );
$$if ICE40 then
  // register OLED outputs
  sb_io sbio1( clock <: cpu_clock, out  <: o_clk,  pin  :> oled_clk);
  sb_io sbio0( clock <: cpu_clock, out  <: o_mosi, pin  :> oled_mosi);
  sb_io sbio2( clock <: cpu_clock, out  <: o_dc,   pin  :> oled_dc);
  sb_io sbio3( clock <: cpu_clock, out  <: o_resn, pin  :> oled_resn);
$$end
$$end

$$if SPIFLASH or SIMULATION then
  // spiflash
  uint1       reg_miso(0);
	// for spiflash memory mapping, need to record prev. cycle addr and rw
	uint$addrW$ prev_mem_addr(0);
	uint1       prev_mem_rw(0);
$$end
$$if SIMULATION then
   uint32 cycle(0);
$$end

  // ram
  // - intermediate interfaces to perform memory mapping on the RAM
  bram_io memio;
  bram uint32 mem<"bram_wmask_byte">[1024] = $datainit$;
  // rom (code)
  bram_io romio;
  bram uint32 rom<"bram_wmask_byte">[1024] = $meminit$;
  //               ^^^^^^^^^^^^^^^
  //  uses template "bram_wmask_byte", that turns wenable into a byte mask

  // cpu
  rv32i_cpu_swirl cpu( mem <:> memio, rom <:> romio );

  // io mapping
  always_before {
	  // ---- RAM / peripherals access
    mem.wenable = memio.wenable & {4{~memio.addr[11,1]}};
		//                            ^^^^^^^ no BRAM write if in peripheral addresses
$$if SPIFLASH or SIMULATION then
    memio.rdata = (prev_mem_addr[11,1] & prev_mem_addr[4,1]/* & ~prev_mem_rw*/) ? {31b0,reg_miso} : mem.rdata;
$$if SMIULATION then
    if ( prev_mem_addr[11,1] & prev_mem_addr[4,1] & ~prev_mem_rw ) { __display("[cycle %d] SPI read: %d",cycle,memio.rdata); }
$$end
		prev_mem_addr = memio.addr;
		prev_mem_rw   = memio.wenable[0,1];
$$else
    memio.rdata   = mem.rdata;
$$end
    mem.wdata     = memio.wdata;
    mem.addr      = memio.addr;
    // ---- ROM
    rom.addr      = romio.addr;
    romio.rdata   = rom.rdata;
		// ---- peripherals
$$if OLED then
    displ_en = 0; // maintain display enable low
$$end
$$if SPIFLASH then
    reg_miso     = sf_miso; // register flash miso
$$end
    // ---- memory mapping to peripherals: writes
$$if SIMULATION then
    if (memio.wenable != 0) {
      //__display("MEM WRITE @%x(%b) = %x (%b)",memio.addr,memio.addr,memio.wdata,memio.wenable);
    }
$$end
    if (memio.wenable != 0 & memio.addr[11,1]) {
      leds      = mem.wdata[0,5] & {5{memio.addr[0,1]}};
$$if SIMULATION then
      if (memio.addr[0,1]) { __display("[cycle %d] LEDs: %b",cycle,leds); }
$$end
$$if OLED then
      // if (memio.addr[1,1]) { __display("[cycle %d] OLED: byte %x",cycle,displ_byte); }
      // command
      displ_en     = (mem.wdata[9,1] | mem.wdata[10,1]) & memio.addr[1,1];
      // reset
      o_resn       = ~ (mem.wdata[0,1] & memio.addr[2,1]);
$$end
$$if SPIFLASH then
			sf_clk  = memio.addr[4,1] ? mem.wdata[0,1] : sf_clk;
			sf_mosi = memio.addr[4,1] ? mem.wdata[1,1] : sf_mosi;
			sf_csn  = memio.addr[4,1] ? mem.wdata[2,1] : sf_csn;
$$end
$$if SIMULATION then
      if (memio.addr[4,1]) {
			  __display("[cycle %d] SPI write %b",cycle,mem.wdata[0,3]);
			}
$$end
    }

    // display
$$if OLED then
    display.enable          = displ_en;
    display.data_or_command = displ_dta_or_cmd;
    display.byte            = displ_byte;
$$if not ICE40 then
    oled_resn = o_resn;   oled_mosi = o_mosi;
    oled_dc   = o_dc;     oled_clk  = o_clk;
$$end
$$end

$$if SIMULATION then
    cycle = cycle + 1;
$$end
  }

  algorithm {
$$if SIMULATION and not BARE then
	  //while (cycle < 50000) { }
    while (1) { }
$$else
    while (1) { }
$$end
  }

}

// --------------------------------------------------

$$if OLED then

$include('../ice-v/SOCs/ice-v-oled.si')

$$end

// --------------------------------------------------
