// @sylefeb 2021
// https://github.com/sylefeb/Silice
// MIT license, see LICENSE_MIT in Silice repo root

// ===== screen CONFIGURATION, adjust to your setups
$$if ULX3S then
$$oled_width  = 240
$$oled_height = 320
$$ST7789      = 1
$$else
$$oled_width  = 128
$$oled_height = 128
$$SSD1351     = 1
$$end

// include SPI drivers
$include('../../common/spi.si')

// import PLLs (clock)
$$if ICESTICK then
import('../../common/plls/icestick_60.v')
$$end

// CPU declaration
riscv cpu_drawer(output uint1  oled_rst,
                 output uint32 oled,
                 output uint1  on_oled,
                ) <mem=4096> {

  // =============== firmware in C language ===========================
$$if ST7789 then
  #include "oled_st7789.h"  // of course we can #include !
$$else
  #include "oled_ssd1351.h"
$$end
  // C main
  void main() {
    oled_init();
    oled_fullscreen();
    int offs = 0;
    while (1) {
      for (int j = 0; j < $oled_height$ ; j ++) {
        for (int i = 0; i < $oled_width$ ; i ++) {
          oled_pix((i + offs)&63,j&63,0);
        }
      }
      ++ offs;
    }
  }
  // =============== end of firmware ==================================

}

// now we are creating the hardware hosting the CPU
unit main(
  output uint8 leds,
$$if OLED then
  output uint1 oled_clk,
  output uint1 oled_mosi,
  output uint1 oled_dc,
  output uint1 oled_resn,
  output uint1 oled_csn(0),
$$else
  inout  uint8 pmod
$$end
$$if VERILATOR then
  output uint2  spiscreen_driver(1/*SSD1351*/),
  output uint10 spiscreen_width(320),
  output uint10 spiscreen_height(240),
$$end
$$if ICESTICK then
  ) <@cpu_clock> {
  // PLL
  uint1 cpu_clock  = uninitialized;
  pll clk_gen (
    clock_in  <: clock,
    clock_out :> cpu_clock
  );
$$else
) {
$$end

  // instantiates our CPU as defined above
  cpu_drawer cpu0;

  // screen driver
  uint1 displ_en         <: cpu0.on_oled;
  uint1 displ_dta_or_cmd <: cpu0.oled[10,1];
  uint8 displ_byte       <: cpu0.oled[0,8];
$$if ST7789 then
  spi_mode3_send displ(
$$else
  spi_mode0_send displ(
$$end
    enable          <: displ_en,
    data_or_command <: displ_dta_or_cmd,
    byte            <: displ_byte,
  );

  always {
    leds = cpu0.oled[0,5];

$$if PMOD then
    // PMOD output
    pmod.oenable = 8b11111111; // all out
    pmod.o = {4b0,displ.spi_mosi,displ.spi_clk,displ.spi_dc,~cpu0.oled_rst};
$$else
		oled_mosi = displ.spi_mosi;
    oled_clk  = displ.spi_clk;
		oled_dc   = displ.spi_dc;
		oled_resn = ~cpu0.oled_rst;
$$end

  }

}
