// SL 2019, MIT license
module %MODULE%(
input      [%ADDR_WIDTH%-1:0]                in_addr,
output reg %DATA_TYPE% [%DATA_WIDTH%-1:0]    out_rdata,
input      [(%WENABLE_WIDTH%)/8-1:0]         in_wenable,
input      [%DATA_WIDTH%-1:0]                in_wdata,
input      clock
);
(* no_rw_check *) reg %DATA_TYPE% [%DATA_WIDTH%-1:0] buffer[%DATA_SIZE%-1:0];
always @(posedge clock) begin
  out_rdata <= buffer[in_addr];
end
integer i;
always @(posedge clock) begin
  for (i = 0; i < (%DATA_WIDTH%)/8; i = i + 1) begin
    if (in_wenable[i]) begin
      buffer[in_addr][i*8+:8] <= in_wdata[i*8+:8];
    end
  end
end
%INITIAL%
endmodule
