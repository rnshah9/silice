#!/bin/bash

set -e

case "$(uname -s)" in
MINGW*|CYGWIN*)
SILICE_DIR=`cygpath $SILICE_DIR`
BUILD_DIR=`cygpath $BUILD_DIR`
FRAMEWORKS_DIR=`cygpath $FRAMEWORKS_DIR`
FRAMEWORK_FILE=`cygpath $FRAMEWORK_FILE`
BOARD_DIR=`cygpath $BOARD_DIR`
SRC_FILE=`cygpath $1`
;;
*)
esac

# LDFLAGS for OpenGL (VGA / SPIscreen)
case "$(uname -s)" in
MINGW*)
LDFLAGS="-LDFLAGS -lopengl32 -LDFLAGS -lfreeglut"
;;
*)
LDFLAGS="-LDFLAGS -lGL -LDFLAGS -lglut -LDFLAGS -pthread"
;;
esac

echo "build script: SILICE_DIR     = $SILICE_DIR"
echo "build script: BUILD_DIR      = $BUILD_DIR"
echo "build script: BOARD_DIR      = $BOARD_DIR"
echo "build script: FRAMEWORKS_DIR = $FRAMEWORKS_DIR"
echo "build script: FRAMEWORK_FILE = $FRAMEWORK_FILE"

if hash make 2>/dev/null; then
  export MAKE=make
else
  export MAKE=mingw32-make
fi

export PATH=$PATH:$SILICE_DIR/../tools/fpga-binutils/mingw64/bin/:$SILICE_DIR

if [[ -z "${VERILATOR_ROOT}" ]]; then
case "$(uname -s)" in
Linux)
unset VERILATOR_ROOT
;;
*)
# export VERILATOR_ROOT=$SILICE_DIR/../tools/fpga-binutils/mingw64/
;;
esac
echo "VERILATOR_ROOT is set to ${VERILATOR_ROOT}"
else
echo "VERILATOR_ROOT already defined, using its value"
fi

if [[ ! -z "${NO_BUILD}" ]]; then
  echo "Skipping build."
  exit
fi

# check Verilator support for -Wno-TIMESCALEMOD
set +e
RET=$((verilator -Wno-TIMESCALEMOD) 2>&1)
set -e
OPT="-Wno-TIMESCALEMOD"
if [[ $RET == *"Unknown warning"* ]]; then
  echo "disabling $OPT"
  OPT=""
else
  echo "using $OPT"
fi

rm -rf $BUILD_DIR/obj_dir

cd $BUILD_DIR

silice --frameworks_dir $FRAMEWORKS_DIR -f $FRAMEWORK_FILE -o build.v $1 "${@:2}"

LIBSL_DIR=$SILICE_DIR/../src/libs/LibSL-small/src/LibSL/
VERILATOR_LIB_DIR=$SILICE_DIR/../frameworks/verilator/

# NOTE: this below is necessary due to some wierd behaviour on some MinGW
#       installs where absolute paths generated by Verilator in its makefile
#       for include directories are incorrectly interepreted by g++.
#       Relative paths seem ok.
cp    $VERILATOR_LIB_DIR/verilator_data.h .
cp -R $SILICE_DIR/../src/libs/LibSL-small/src/LibSL .

# TODO: this selection process could be more elegant ...
if [[ -z "${VGA}" ]] && [[ -z "${SDRAM}" ]] && [[ -z "${OLED}" ]]; then
# basic framework
LDFLAGS=""
VERILATOR_LIB="verilator_bare"
VERILATOR_LIB_SRC="$VERILATOR_LIB_DIR/verilator_bare.cpp $VERILATOR_LIB_DIR/verilator_data.cpp"
else
if [[ -z "${SDRAM}" ]]; then
if [[ -z "${OLED}" ]]; then
# VGA only
VERILATOR_LIB="verilator_vga"
VERILATOR_LIB_SRC="$VERILATOR_LIB_DIR/verilator_vga.cpp $VERILATOR_LIB_DIR/verilator_data.cpp $VERILATOR_LIB_DIR/display.cpp $VERILATOR_LIB_DIR/VgaChip.cpp $LIBSL_DIR/Image/ImageFormat_TGA.cpp $LIBSL_DIR/Image/Image.cpp $LIBSL_DIR/Image/tga.cpp $LIBSL_DIR/Math/Vertex.cpp $LIBSL_DIR/Math/Math.cpp $LIBSL_DIR/StlHelpers/StlHelpers.cpp $LIBSL_DIR/CppHelpers/CppHelpers.cpp $LIBSL_DIR/System/System.cpp"
else
# SPIscreen only
VERILATOR_LIB="verilator_spiscreen"
VERILATOR_LIB_SRC="$VERILATOR_LIB_DIR/verilator_spiscreen.cpp $VERILATOR_LIB_DIR/verilator_data.cpp $VERILATOR_LIB_DIR/display.cpp $VERILATOR_LIB_DIR/SPIScreen.cpp $LIBSL_DIR/Image/ImageFormat_TGA.cpp $LIBSL_DIR/Image/Image.cpp $LIBSL_DIR/Image/tga.cpp $LIBSL_DIR/Math/Vertex.cpp $LIBSL_DIR/Math/Math.cpp $LIBSL_DIR/StlHelpers/StlHelpers.cpp $LIBSL_DIR/CppHelpers/CppHelpers.cpp $LIBSL_DIR/System/System.cpp"
fi
else
if [[ -z "${VGA}" ]]; then
# SDRAM only
LDFLAGS=""
VERILATOR_LIB="verilator_sdram"
VERILATOR_LIB_SRC="$VERILATOR_LIB_DIR/verilator_sdram.cpp $VERILATOR_LIB_DIR/verilator_data.cpp $VERILATOR_LIB_DIR/sdr_sdram.cpp $LIBSL_DIR/StlHelpers/StlHelpers.cpp $LIBSL_DIR/CppHelpers/CppHelpers.cpp $LIBSL_DIR/System/System.cpp"
else
# VGA and SDRAM
VERILATOR_LIB="verilator_vga_sdram"
VERILATOR_LIB_SRC="$VERILATOR_LIB_DIR/verilator_vga_sdram.cpp $VERILATOR_LIB_DIR/verilator_data.cpp $VERILATOR_LIB_DIR/display.cpp $VERILATOR_LIB_DIR/sdr_sdram.cpp $VERILATOR_LIB_DIR/VgaChip.cpp $LIBSL_DIR/Image/ImageFormat_TGA.cpp $LIBSL_DIR/Image/Image.cpp $LIBSL_DIR/Image/tga.cpp $LIBSL_DIR/Math/Vertex.cpp $LIBSL_DIR/Math/Math.cpp $LIBSL_DIR/StlHelpers/StlHelpers.cpp $LIBSL_DIR/CppHelpers/CppHelpers.cpp $LIBSL_DIR/System/System.cpp"
fi
fi
fi

if test -f "$1.cpp"; then
	echo ">>>>>> custom verilator framework detected <<<<<<"
	VERILATOR_LIB="verilator_custom"
	VERILATOR_LIB_SRC="$1.cpp $VERILATOR_LIB_DIR/verilator_data.cpp"
	if test -f "$1.h"; then
		cp "$1.h" custom.h
	else
		touch custom.h
	fi
else
	touch custom.h
fi

echo "using verilator framework $VERILATOR_LIB"

verilator -Wno-fatal -Wno-PINMISSING -Wno-WIDTH -O3 -cc build.v --report-unoptflat $OPT --top-module top --exe $VERILATOR_LIB_SRC -CFLAGS "-include" -CFLAGS "../verilator_data.h" -CFLAGS "-include" -CFLAGS "custom.h" -CFLAGS "-I$SILICE_DIR/../frameworks/verilator/" -CFLAGS "-I../"  -CFLAGS "-I../LibSL/" -CFLAGS "-DNO_SHLWAPI" $LDFLAGS
cd obj_dir

$MAKE -f Vtop.mk -j$(nproc)

cd ..

if [[ -z "${NO_PROGRAM}" ]]; then
  ./obj_dir/Vtop
else
  echo "Skipping execution."
fi
